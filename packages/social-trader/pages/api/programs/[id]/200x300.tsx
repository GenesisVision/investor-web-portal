import React from "react";
import ReactDOM from "react-dom/server";
import {
  ProgramFollowDetailsFull,
  ProgramProfitPercentCharts
} from "gv-api-web";
import SimpleChart from "components/chart/simple-chart";
import programsApi from "services/api-client/programs-api";
import { NextApiRequest, NextApiResponse } from "next";

type Position = { y: number };

const Title: React.FC<Position> = ({ children, y }) => {
  return (
    <text
      fontSize={12}
      fill="#545454"
      fontFamily={
        "system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Ubuntu, Helvetica Neue, sans-serif"
      }
    >
      <tspan x={10} y={y}>
        {children}
      </tspan>
    </text>
  );
};

const Value: React.FC<Position> = ({ children, y }) => {
  return (
    <text
      fontSize={13}
      fill="#000000"
      textAnchor="end"
      fontFamily={
        "system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Ubuntu, Helvetica Neue, sans-serif"
      }
    >
      <tspan x={190} y={y}>
        {children}
      </tspan>
    </text>
  );
};

const Profit: React.FC<{ children: string | number } & Position> = ({
  children,
  y
}) => {
  let fontSize = 30;
  const l = children.toString().length;
  if (l > 9) {
    fontSize = 22;
  } else if (l > 6) {
    fontSize = 26;
  }
  return (
    <text
      fontSize={fontSize}
      fill="#33BD85"
      textAnchor="end"
      fontFamily={
        "system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Ubuntu, Helvetica Neue, sans-serif"
      }
    >
      <tspan x={190} y={y}>
        {children}
      </tspan>
    </text>
  );
};

const Label: React.FC = ({ children }) => {
  return (
    <text
      fontSize={16}
      fill="#000"
      textAnchor="middle"
      fontFamily={
        "system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Ubuntu, Helvetica Neue, sans-serif"
      }
    >
      <tspan x={100} y={85}>
        {children}
      </tspan>
    </text>
  );
};

const Banner1 = (props: {
  chart: ProgramProfitPercentCharts;
  details: ProgramFollowDetailsFull;
}) => {
  const points = props.chart.charts[0];
  const statistic = props.chart.statistic;
  return (
    <svg
      width="200"
      height="299"
      viewBox="0 0 200 299"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <rect
        x="0.5"
        y="0.5"
        width="199"
        height="298"
        fill="white"
        stroke="#040127"
      />
      <rect width="200" height="62.9474" fill="#040127" />
      <g clipPath="url(#clip0)">
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M78.3316 20.0233C78.3316 34.695 67.042 46.6317 53.1656 46.6317C39.2896 46.6317 28 34.695 28 20.0233C28 18.9273 28.0628 17.8472 28.1867 16.786H32.7074C32.5582 17.8426 32.4805 18.9242 32.4805 20.0233C32.4805 32.083 41.7598 41.8941 53.1656 41.8941C64.0476 41.8941 72.9952 32.9626 73.7943 21.6687H41.8002C42.5618 27.581 47.3678 32.1525 53.1656 32.1525C57.6538 32.1525 61.5489 29.4126 63.4323 25.4319H68.2759C66.14 32.0878 60.1718 36.8898 53.1656 36.8898C44.3704 36.8898 37.2135 29.3227 37.2135 20.0233C37.2135 18.9161 37.3151 17.8345 37.5092 16.786H78.1449C78.2688 17.8472 78.3316 18.9273 78.3316 20.0233Z"
          fill="#16B9AD"
        />
      </g>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M113.063 34.2533L108.478 45.4664H105.497L100.927 34.2533H104.198L107.102 41.5578L110.067 34.2533H113.063Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M114.066 34.2533H117.092V45.4664H114.066V34.2533Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M123.385 45.6909C122.519 45.6909 121.678 45.5788 120.863 45.3545C120.047 45.1302 119.385 44.8312 118.876 44.4575L119.869 42.1187C120.348 42.4498 120.903 42.7168 121.535 42.9197C122.167 43.1226 122.789 43.224 123.4 43.224C124.562 43.224 125.143 42.9197 125.143 42.3109C125.143 41.9906 124.977 41.753 124.646 41.5981C124.315 41.4433 123.782 41.2804 123.048 41.1095C122.243 40.928 121.571 40.7331 121.031 40.5249C120.491 40.3166 120.027 39.9829 119.64 39.5237C119.253 39.0645 119.059 38.4451 119.059 37.6655C119.059 36.9821 119.237 36.3653 119.594 35.8154C119.951 35.2654 120.483 34.8302 121.191 34.5098C121.9 34.1895 122.768 34.0293 123.797 34.0293C124.501 34.0293 125.194 34.112 125.876 34.2776C126.559 34.4431 127.16 34.686 127.68 35.0064L126.748 37.3612C125.729 36.7845 124.74 36.4962 123.782 36.4962C123.181 36.4962 122.743 36.5896 122.468 36.7765C122.192 36.9634 122.055 37.2063 122.055 37.5053C122.055 37.8044 122.218 38.0286 122.544 38.1781C122.87 38.3276 123.395 38.4825 124.118 38.6427C124.934 38.8242 125.609 39.0191 126.144 39.2274C126.679 39.4356 127.142 39.7666 127.535 40.2205C127.927 40.6744 128.123 41.2911 128.123 42.0707C128.123 42.7435 127.945 43.3522 127.588 43.8968C127.232 44.4414 126.697 44.8766 125.983 45.2023C125.27 45.528 124.404 45.6909 123.385 45.6909Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M129.89 34.2533H132.917V45.4664H129.89V34.2533Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M137.795 44.9382C138.697 45.4397 139.713 45.691 140.844 45.691C141.975 45.691 142.992 45.4397 143.894 44.9382C144.241 44.7444 144.56 44.5228 144.85 44.272C145.313 43.8727 145.703 43.4003 146.018 42.8554C146.533 41.9694 146.791 40.9705 146.791 39.8599C146.791 38.7492 146.533 37.7509 146.018 36.8644C145.504 35.9784 144.796 35.2843 143.894 34.7822C142.992 34.28 141.975 34.0293 140.844 34.0293C139.713 34.0293 138.697 34.28 137.795 34.7822C136.893 35.2843 136.185 35.9784 135.67 36.8644C135.156 37.7509 134.898 38.7492 134.898 39.8599C134.898 40.9705 135.156 41.9694 135.67 42.8554C136.185 43.742 136.893 44.436 137.795 44.9382ZM142.312 42.6634C141.873 42.9302 141.384 43.064 140.844 43.064C140.304 43.064 139.815 42.9302 139.377 42.6634C138.938 42.3966 138.592 42.0199 138.337 41.5338C138.083 41.0483 137.955 40.4903 137.955 39.8599C137.955 39.4326 138.014 39.038 138.132 38.6774C138.187 38.5062 138.256 38.3422 138.337 38.1859C138.592 37.7004 138.938 37.3237 139.377 37.0569C139.815 36.7901 140.304 36.6564 140.844 36.6564C141.074 36.6564 141.296 36.6807 141.508 36.7295C141.792 36.7948 142.061 36.9042 142.312 37.0569C142.75 37.3237 143.096 37.7004 143.351 38.1859C143.606 38.672 143.733 39.23 143.733 39.8599C143.733 40.4903 143.606 41.0483 143.351 41.5338C143.181 41.8583 142.97 42.134 142.718 42.361C142.593 42.4739 142.457 42.5749 142.312 42.6634Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M158.937 34.2533V45.4664H156.445L151.722 39.4914V45.4664H148.757V34.2533H151.248L155.971 40.2283V34.2533H158.937Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M108.305 22.6873H110.98V27.3327C110.369 27.7919 109.665 28.1443 108.871 28.3899C108.076 28.6356 107.281 28.7584 106.486 28.7584C105.365 28.7584 104.356 28.5101 103.459 28.0135C102.563 27.5169 101.86 26.8254 101.35 25.9391C100.841 25.0527 100.586 24.0489 100.586 22.9276C100.586 21.8062 100.841 20.8024 101.35 19.916C101.86 19.0297 102.568 18.3382 103.475 17.8416C104.382 17.345 105.406 17.0968 106.547 17.0968C107.546 17.0968 108.443 17.273 109.237 17.6254C110.032 17.9778 110.695 18.485 111.225 19.1472L109.299 20.9733C108.575 20.1403 107.709 19.7238 106.7 19.7238C105.783 19.7238 105.044 20.0148 104.484 20.5968C103.923 21.1789 103.643 21.9558 103.643 22.9276C103.643 23.547 103.77 24.0996 104.025 24.5855C104.28 25.0714 104.636 25.4505 105.095 25.7228C105.554 25.9951 106.078 26.1313 106.669 26.1313C107.25 26.1313 107.795 26.0085 108.305 25.7629V22.6873ZM121.873 26.083V28.5339H113.282V17.3208H121.674V19.7716H116.278V21.6619H121.032V24.0326H116.278V26.083H121.873ZM134.111 17.3208V28.5339H131.619L126.896 22.5589V28.5339H123.931V17.3208H126.422L131.145 23.2957V17.3208H134.111ZM145.218 26.083V28.5339H136.627V17.3208H145.019V19.7716H139.623V21.6619H144.377V24.0326H139.623V26.083H145.218ZM151.035 28.7584C150.169 28.7584 149.328 28.6462 148.513 28.422C147.698 28.1977 147.035 27.8987 146.526 27.5249L147.519 25.1862C147.998 25.5173 148.554 25.7842 149.186 25.9871C149.817 26.19 150.439 26.2915 151.05 26.2915C152.212 26.2915 152.793 25.9871 152.793 25.3784C152.793 25.058 152.627 24.8204 152.296 24.6656C151.965 24.5107 151.433 24.3479 150.699 24.177C149.894 23.9955 149.221 23.8006 148.681 23.5923C148.141 23.3841 147.677 23.0504 147.29 22.5912C146.903 22.132 146.709 21.5126 146.709 20.733C146.709 20.0495 146.888 19.4328 147.244 18.8828C147.601 18.3329 148.133 17.8977 148.842 17.5773C149.55 17.2569 150.419 17.0968 151.448 17.0968C152.151 17.0968 152.844 17.1795 153.527 17.345C154.21 17.5106 154.811 17.7535 155.33 18.0739L154.398 20.4286C153.379 19.852 152.39 19.5636 151.433 19.5636C150.831 19.5636 150.393 19.6571 150.118 19.844C149.843 20.0309 149.705 20.2738 149.705 20.5728C149.705 20.8718 149.868 21.0961 150.194 21.2456C150.521 21.3951 151.045 21.5499 151.769 21.7101C152.584 21.8917 153.259 22.0866 153.794 22.2948C154.329 22.5031 154.793 22.8341 155.185 23.288C155.578 23.7418 155.774 24.3586 155.774 25.1381C155.774 25.8109 155.595 26.4196 155.239 26.9643C154.882 27.5089 154.347 27.9441 153.634 28.2698C152.92 28.5955 152.054 28.7584 151.035 28.7584ZM157.541 17.3208H160.568V28.5339H157.541V17.3208ZM166.859 28.7584C165.993 28.7584 165.153 28.6462 164.337 28.422C163.522 28.1977 162.86 27.8987 162.35 27.5249L163.344 25.1862C163.823 25.5173 164.378 25.7842 165.01 25.9871C165.642 26.19 166.263 26.2915 166.875 26.2915C168.036 26.2915 168.617 25.9871 168.617 25.3784C168.617 25.058 168.452 24.8204 168.12 24.6656C167.789 24.5107 167.257 24.3479 166.523 24.177C165.718 23.9955 165.046 23.8006 164.506 23.5923C163.965 23.3841 163.502 23.0504 163.115 22.5912C162.727 22.132 162.534 21.5126 162.534 20.733C162.534 20.0495 162.712 19.4328 163.069 18.8828C163.425 18.3329 163.958 17.8977 164.666 17.5773C165.374 17.2569 166.243 17.0968 167.272 17.0968C167.975 17.0968 168.668 17.1795 169.351 17.345C170.034 17.5106 170.635 17.7535 171.155 18.0739L170.222 20.4286C169.203 19.852 168.215 19.5636 167.257 19.5636C166.656 19.5636 166.217 19.6571 165.942 19.844C165.667 20.0309 165.53 20.2738 165.53 20.5728C165.53 20.8718 165.693 21.0961 166.019 21.2456C166.345 21.3951 166.87 21.5499 167.593 21.7101C168.408 21.8917 169.084 22.0866 169.619 22.2948C170.154 22.5031 170.617 22.8341 171.01 23.288C171.402 23.7418 171.598 24.3586 171.598 25.1381C171.598 25.8109 171.42 26.4196 171.063 26.9643C170.706 27.5089 170.171 27.9441 169.458 28.2698C168.745 28.5955 167.878 28.7584 166.859 28.7584Z"
        fill="white"
      />
      <Label>{props.details.publicInfo.title}</Label>
      <Title y={120}>Profit</Title>
      <Profit y={120}>{`${statistic.profitPercent}%`}</Profit>
      <Title y={151}>Equity</Title>
      <Value y={151}>{`${statistic.balance} ${points.currency}`}</Value>
      <Title y={182}>Investors</Title>
      <Value y={182}>{statistic.investors}</Value>
      <Title y={214}>D.down</Title>
      <Value y={214}>{statistic.maxDrawdown}</Value>
      <SimpleChart data={points.chart} width={184} height={64} x={8} y={228} />
    </svg>
  );
};

const App = (props: {
  chart: ProgramProfitPercentCharts;
  details: ProgramFollowDetailsFull;
}) => {
  return ReactDOM.renderToStaticNodeStream(
    <Banner1 chart={props.chart} details={props.details} />
  );
};

export default async (req: NextApiRequest, res: NextApiResponse) => {
  const {
    query: { id }
  } = req;

  try {
    const details = await programsApi.getProgramDetails(id as string);
    const chart = await programsApi.getProgramProfitPercentCharts(details.id);

    res.statusCode = 200;
    res.setHeader("Content-Type", "image/svg+xml");
    res.send(App({ chart, details }));
  } catch (e) {
    res.statusCode = 500;
    res.end();
  }
};
